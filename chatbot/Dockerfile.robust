FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Upgrade pip and install wheel for better dependency resolution
RUN pip install --upgrade pip setuptools wheel

# Install dependencies in stages to avoid conflicts
# Stage 1: Core async libraries
RUN pip install --no-cache-dir \
    anyio>=4.6.0 \
    sniffio>=1.3.0 \
    typing-extensions>=4.8.0

# Stage 2: HTTP and networking
RUN pip install --no-cache-dir \
    httpx>=0.25.0 \
    certifi \
    idna

# Stage 3: Web framework
RUN pip install --no-cache-dir \
    pydantic>=2.0.0 \
    fastapi>=0.100.0 \
    uvicorn[standard]>=0.20.0

# Stage 4: Application specific
RUN pip install --no-cache-dir \
    python-multipart \
    jinja2 \
    ollama>=0.1.0

# Stage 5: MCP (most likely to cause conflicts, so install last)
RUN pip install --no-cache-dir mcp>=1.0.0 || \
    pip install --no-cache-dir --no-deps mcp>=1.0.0

# Copy application code
COPY . .

# Create non-root user
RUN useradd -m -u 1000 chatbot && chown -R chatbot:chatbot /app
USER chatbot

# Create a startup script to handle dependencies
RUN echo '#!/bin/bash\n\
echo "Starting Zabbix Chatbot..."\n\
echo "Environment variables:"\n\
echo "  MCP_URL: $MCP_URL"\n\
echo "  OLLAMA_HOST: $OLLAMA_HOST"\n\
echo "  OLLAMA_MODEL: $OLLAMA_MODEL"\n\
echo "  WAIT_FOR_SERVICES: $WAIT_FOR_SERVICES"\n\
\n\
if [ "$WAIT_FOR_SERVICES" = "true" ]; then\n\
  echo "Waiting for services to be ready..."\n\
  max_attempts=30\n\
  attempt=0\n\
  \n\
  while [ $attempt -lt $max_attempts ]; do\n\
    if curl -sf "$MCP_URL" >/dev/null 2>&1 && curl -sf "$OLLAMA_HOST/api/tags" >/dev/null 2>&1; then\n\
      echo "✅ All services are ready!"\n\
      break\n\
    fi\n\
    echo "⏳ Waiting for services... ($((attempt+1))/$max_attempts)"\n\
    sleep 10\n\
    attempt=$((attempt+1))\n\
  done\n\
  \n\
  if [ $attempt -eq $max_attempts ]; then\n\
    echo "⚠️  Services not ready after $((max_attempts*10)) seconds, starting anyway..."\n\
  fi\n\
fi\n\
\n\
echo "🚀 Starting FastAPI server..."\n\
exec python app.py' > /app/start.sh && chmod +x /app/start.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:9000/health || exit 1

ENV PORT=9000
EXPOSE 9000

CMD ["/app/start.sh"]
